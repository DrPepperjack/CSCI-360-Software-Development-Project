package com.csc360.aircraft;

import java.io.*;
import java.util.*;

/**
 * This class reads aircraft data from a CSV file, fills in missing values based on aircraft type,
 * calculates the max range (nm), and writes the updated data to a new CSV file.
 */
 
public class AircraftDatabaseProcessor {

    // Default aircraft specifications by type
    private static final Map<String, AircraftSpec> DEFAULT_SPECS = Map.of(
        "prop", new AircraftSpec("Cessna 172 Skyhawk", 212, 36, 122),
        "turboprop", new AircraftSpec("Beechcraft King Air 350i", 2700, 400, 312),
        "jet", new AircraftSpec("Gulfstream G550", 39500, 3400, 488)
    );

    // Input and output CSV paths
    private static final String INPUT_CSV = "src/main/resources/Aircraft_Database.csv";
    private static final String OUTPUT_CSV = "output/Final_Updated_Aircraft_Database_with_MaxRange.csv";

    public static void main(String[] args) {
        List<String[]> rows = new ArrayList<>();
        String[] headers;

        try (BufferedReader reader = new BufferedReader(new FileReader(INPUT_CSV))) {
            String line = reader.readLine();
            if (line == null) {
                System.out.println("Empty file.");
                return;
            }

            // Read header and add Max Range column
            headers = line.split(",");
            List<String> headerList = new ArrayList<>(List.of(headers));
            if (!headerList.contains("Max Range (nm)")) {
                headerList.add("Max Range (nm)");
            }
            headers = headerList.toArray(new String[0]);
            rows.add(headers);

            // Read and process each aircraft row
            while ((line = reader.readLine()) != null) {
                String[] row = line.split(",", -1); // Preserve empty cells
                row = processRow(row, headers);
                rows.add(row);
            }

        } catch (IOException e) {
            System.err.println("Error reading input CSV: " + e.getMessage());
            return;
        }

        // Write updated CSV
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(OUTPUT_CSV))) {
            for (String[] row : rows) {
                writer.write(String.join(",", row));
                writer.newLine();
            }
            System.out.println("Updated CSV written to: " + OUTPUT_CSV);
        } catch (IOException e) {
            System.err.println("Error writing output CSV: " + e.getMessage());
        }
    }

    /**
     * Processes a single row: fills missing values and calculates Max Range (nm).
     */
    private static String[] processRow(String[] row, String[] headers) {
        Map<String, String> data = new HashMap<>();
        for (int i = 0; i < headers.length && i < row.length; i++) {
            data.put(headers[i], row[i].trim());
        }

        String type = data.getOrDefault("Type", "").toLowerCase().trim();
        AircraftSpec spec = DEFAULT_SPECS.getOrDefault(type, DEFAULT_SPECS.get("prop"));

        // Update missing or invalid fields
        data.put("Make and Model", isMissing(data.get("Make and Model")) ? spec.model : data.get("Make and Model"));
        data.put("Fuel Tank Capacity (L)", validateNumber(data.get("Fuel Tank Capacity (L)"), spec.fuelCapacity));
        data.put("Fuel Burn (L/h)", validateNumber(data.get("Fuel Burn (L/h)"), spec.fuelBurn));
        data.put("Cruise Airspeed (knots)", validateNumber(data.get("Cruise Airspeed (knots)"), spec.airspeed));

        // Calculate Max Range
        try {
            double capacity = Double.parseDouble(data.get("Fuel Tank Capacity (L)"));
            double burn = Double.parseDouble(data.get("Fuel Burn (L/h)"));
            double speed = Double.parseDouble(data.get("Cruise Airspeed (knots)"));
            double maxRange = (burn != 0) ? (capacity / burn) * speed : 0;
            data.put("Max Range (nm)", String.format("%.2f", maxRange));
        } catch (NumberFormatException e) {
            data.put("Max Range (nm)", "0");
        }

        // Rebuild row in header order
        String[] updatedRow = new String[headers.length];
        for (int i = 0; i < headers.length; i++) {
            updatedRow[i] = data.getOrDefault(headers[i], "");
        }
        return updatedRow;
    }

    /**
     * Checks if a value is considered missing or invalid.
     */
    private static boolean isMissing(String value) {
        return value == null || value.isEmpty() || value.equalsIgnoreCase("unknown");
    }

    /**
     * Validates and returns a numeric string, or defaults to the provided value.
     */
    private static String validateNumber(String value, double defaultValue) {
        try {
            double val = Double.parseDouble(value);
            return val > 0 ? value : String.valueOf(defaultValue);
        } catch (NumberFormatException e) {
            return String.valueOf(defaultValue);
        }
    }

    /**
     * Container class for aircraft specification.
     */
    private static class AircraftSpec {
        String model;
        double fuelCapacity;
        double fuelBurn;
        double airspeed;

        AircraftSpec(String model, double capacity, double burn, double speed) {
            this.model = model;
            this.fuelCapacity = capacity;
            this.fuelBurn = burn;
            this.airspeed = speed;
        }
    }
}
